// Load Wi-Fi library
#include <WiFi.h>
#include <HTTPClient.h>

// set pin numbers 
const int buttonLog = 4;  // the number of the pushbutton pin for logistics department
const int ledLog =  5;    // the number of the LED pin for logistics department
#define INTERNAL_LED 2 // The number of the internal led
// variable for storing the pushbutton status 
int buttonState = 0;

// Auxiliar variables to store the current output state

int ledLogStatus;

// Start
String ledSasLabState = "off";

// Network credentials
char* ssid = "AZ_Zeno_Gast";
char* password = "";


// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0; 
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

IPAddress local_IP(192, 168, 0, 107); // Desired Static IP Address
IPAddress subnet(255, 255, 255, 0);
IPAddress gateway(192, 168, 0, 1);

void setup() {
   // Serial port for debugging purposes
  Serial.begin(115200);  
  

  // initialize the pushbutton pin as an input for logistics department
  pinMode(buttonLog, INPUT);
  // initialize the LED pin as an output for logistics department
  pinMode(ledLog, OUTPUT);

  // Connect to Wi-Fi network with SSID and password
    WiFi.mode(WIFI_STA);
    // Configures Static IP Address
    if (!WiFi.config(local_IP, gateway, subnet))
    {
        digitalWrite(INTERNAL_LED, HIGH);   // turn the LED on (HIGH is the voltage level)
        delay(1000);                       // wait for a second
        digitalWrite(INTERNAL_LED, LOW);    // turn the LED off by making the voltage LOW
        delay(1000);      
         Serial.println("Configuration Failed!");
    }
  // Try to connect to wifi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
      digitalWrite(INTERNAL_LED, HIGH);   // turn the LED on (HIGH is the voltage level)
    Serial.print(".");
  }
  digitalWrite(INTERNAL_LED, LOW);    // turn the LED off by making the voltage LOW
  server.begin();
  
    // Print the assigned network settings
    Serial.println("\nConnected to the WiFi network");
    Serial.print("Local ESP32 IP: ");
    Serial.println(WiFi.localIP());
    Serial.print("Subnet Mask: " );
    Serial.println(WiFi.subnetMask());
    Serial.print("Gateway IP: ");
    Serial.println(WiFi.gatewayIP());
    Serial.print("DNS 1: ");
    Serial.println(WiFi.dnsIP(0));
    Serial.print("DNS 2: ");
    Serial.println(WiFi.dnsIP(1));

}

void loop() {
  

  // read the state of the pushbutton value
  buttonState = digitalRead(buttonLog);

  // check if the pushbutton is pressed for logistics department
  // if it is, the buttonState is HIGH
  if ( buttonState== HIGH){
    delay(300);                                 // delay 300 miliseconds
    if ( ledLogStatus == 1){                   // if button was of; set value to 1. if botton was on; set value to 0
    ledLogStatus =0;
    }else {
      ledLogStatus = 1;
    }
  }
  if (ledLogStatus == HIGH) {    // if the value was 1 ( HIGH):
    // turn LED on
    digitalWrite(ledLog, HIGH);  
   ledSasLabState = "on";
      
  } else {
    // turn LED off
    digitalWrite(ledLog, LOW);
    ledSasLabState = "off";
  }

   WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // loop while the client's connected
      currentTime = millis();
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            

            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #555555;}</style></head>");
            
            // Web Page Heading
            client.println("<body><h1>ESP32 Web Server</h1>");
            
            // Display current state, and ON/OFF buttons lab led
            client.println("<p> id=led Centraal labo led - State " + ledSasLabState + "</p>");
            // If lab led is on, it displays the ON button       
            if (ledSasLabState== "on") {
              client.println("<p><a id=\"/lab/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a id=\"/lab/off\"><button class=\"button button2\">OFF</button></a></p>");
            } 
              
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }

} 

